{"./":{"url":"./","title":"Introduction","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Multiboot with OpenCore Hello there! Looks like you're trying to get macOS and $(OtherOS) installed on your system, but you also do not want to mess $(OtherOS) or macOS in the process. You will be guided here through a multitude of steps to achieve just that while keeping the OS setups as unaffected as possible. Firmware Types: Multibooting is greately affected by the type of firmware you're running. This guide will cover the known 2 types which are: UEFI Legacy/CSM/BIOS The differences are minimal once you're using OpenCore but also it might be a bit difficult for the latter. Other than that, this guide will cover these elements: What is multibooting and how does it work? Partitioning vs Disk separating UEFI One disk for all OSes Different disks for different OSes Legacy One disk for all OSes Different disks for different OSes Troubleshooting Tips and Tricks Disclaimer We are not responsible for bricked devices, dead hard drives, thermonuclear war, or you getting fired because you got a kernel panic and didn't save your work. You are responsible for reading everything carefully before you do anything. Do your research and ask for support if you have any questions or issues before trying random things on the internet because \"it's the internet\". If you do, YOU are choosing to follow random things on the internet, and if YOU point the finger at us for messing up your device, WE will laugh at you. Now that we got that our of our way let's get going, and good luck. "},"QUICK.html":{"url":"QUICK.html","title":"Quick! I know what do, just tell me already","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Quick Guide no BS Ok, if you're quite experienced with how partitioning and booting multiple OSes then here are what you need to look for: BACKUP YOUR DATA, this can turn easily to a destructive operation. macOS requires: EFI partition (ESP) of 200MB minumum GPT formatted disk UEFI system (or DUET for legacy systems, comes with OpenCorePkg) OpenCore should preferably be copied to the EFI of the same disk Make sure you run the BootInstall.command if you're on a legacy system the EFI partition preferably needs to be at the beginning of disk for multibooting with Windows (read OpenCore's configuration.pdf) It doesn't matter if you already have anything on that drive: You can convert it to GPT (if it's MBR) and create an EFI partition with flag hex EF00 (using gdisk for example or gparted and choosing type efi) Resize the existing EFI to 200MB (windows usually limits it on a new install to 100MB, some linux distros have lower or higher sizes, but usually less than 200MB) Windows 10 1709 and later have a utility called mbr2gpt to convert the Windows boot disk to UEFI Do this to dualboot Windows 10 and macOS on the same drive no matter what the boot mode is In case of legacy system, you'll lose windows access until you install OpenCore and boot windows from it UEFI systems will boot directly when the conversion happens as long as you configure your computer's firmware setup (BIOS setup) to UEFI mode This utility may say that it cannot convert the setup for whatever reason, you can do that manually by: Preparing a windows 10 USB installer Using a linux distribution to: convert the disk to gpt (gdisk) create resize/create a new partition with hex EF00 or type efi (gparted) Make sure it's 200MB for macOS formatting You can create another partition of macOS along the way The EFI can preferably be at the beginning of the disk (OpenCore requirement) Boot windows installer: assign a letter to the EFI partition and Windows partition through diskpart (google diskpart assign letter) run bcdboot C:\\Windows /s S: /f UEFI (with C: and S: being the partition letter you assigned to Windows and EFI partition respectfully, read bcdboot manual) Boot windows and hope nothing broke If you're using linux it's the same steps as earlier (just 200MB EFI partition and somewhere to put macOS on) Make sure the disk doesn't have any S.M.A.R.T errors DO NOT have multiple EFIs on the same disk, you MUST only have ONE EFI partition per disk The OS Install order does not matter at all however windows can be a bit of a bitch, so installing it after macOS can be challenging, linux doesn't pose such problems If you happen to stumble on the sad windows crap you can: Boot windows installer Erase the partition where you want windows to be installed on to NTFS (as expected) Follow the rest from this guide over at TenForums You do NOT need MSR and Recovery, and you cannot create them when there are things already installed on the disk (blame windows installer) Now that you have all these information, good luck with the rest. However if you're not sure, follow then the long way that has more explanations and details on how to properly do it. "},"Intro/Def.html":{"url":"Intro/Def.html","title":"What is it?","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) What is multibooting? Multibooting is the process of having multiple OSes booting off a same device and physically present on that device. You might say \"well duh!\" but some people do not know that you can only boot one OS at a time. Contrary to virtualisation, multibooting does NOT load all OSes at the same time but you turn off one to get to the other. Multibooting can be on any machine, whether it's a virtual one or a real one, as long as the firmware is able to boot either of the OSes, it's good. Here is how we can see Multiboot vs Virtualisation: Now that you made the difference, there are thing you need to know about dualbooting, mainly: Disk partitioning Bootloader location Legacy UEFI Bootloader selection Legacy UEFI Configuration of the bootloader But before starting any of this PLEASE BACKUP YOUR DATA. "},"Intro/Booting-part.html":{"url":"Intro/Booting-part.html","title":"UEFI? Legacy? CSM? What?","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) UEFI Systems Ever since UEFI, the disk default partition map format is GPT (GUID Partition Table), which added support for more than 2TB of disk size and more than 4 partitions that was the limit of MBR while still keeping a backward compatibility with MBR for legacy systems. If your computer (prebuilt) came with Windows 8 (2012 and later), then your disk is probably partitionned as GPT. Usually 2012+ computers that came with Windows 8 would have a UEFI firmware (some OEMs released Windows 7 releases alongside those, so make sure yours has UEFI), and this is a newly spread firmware type (that was in developement since the 2000s) and was already deployed on Apple computers ever since the intel switch (but their own heavily modified firmware, it's called EFI and not UEFI for the lack of Universiality). This new firmware has some new features like SecureBoot, help with faster booting, hardware passthrough, graphical interface with mouse support (and more). To know more about UEFI and SecureBoot check this writeup by Osy86 here. Basically a UEFI boot goes something like this: UEFI Firmware loads up Loads its integrated drivers and services Reads the boot menu entries and start loading the first boot entry If failed starts the next one Loads the bootloader OS is loaded after that. Usually the said \"bootloader\" is contained somewhere in the disk, and that somewhere is called a EFI Partition. You can find this named different things like ESP (EFI System Partition), SYSTEM, EFI, BOOT and so on. This partition is FAT32 formatted and flagged as EF00 in MBR or C12A7328-F81F-11D2-BA4B-00A0C93EC93B GUID in GPT. This partition contains usually the EFI applications (like an OS bootloader) in it that are loaded at boot by the UEFI firmware (remember this as it is important for later for recovery). Legacy/CSM Systems Contrary to UEFI, Legacy systems are a older and much more mature (dating back to the first IBM PCs). They're certainly a lot more limited and slower than UEFI on the same system but hold better compatibility with a lot of OSes (even macOS in some rare cases). Computer pre-2012 usually have this type of firmware (some exceptions like servers and some professional laptops and so on that can also have UEFI, they're not reliable thought in that mode). The computer would usually come with a version of Windows that is older than Windows 8 with a hard drive that is less than 2TB. Some desktop users at this time would also install OSes in Legacy mode even if their motherboard support the newer UEFI standard. This could create issues with multibooting later on. These systems rely on another method of loading the bootloader. This piece of software is usually written in the first sectors of the disk (formatted as MBR) called boot sector, this sector is usually 512 or 4096 bytes big, the BIOS would then read the code, copy it to memory and then execute it, at that point an OS or Bootloader menu (like GRUB2) will show up: BIOS Starts up Reads the boot sector Loads the program into memory Executes the program Bootloader appears OS Boot. Major differences between the systems: We'll put them in a table to show the main differences: UEFI Legacy FastBoot ✅ (on most) ❌ (only some do, not a standard) Bootloader Chooser through the boot menu ✅ (on most) ❌ (only some do, not a standard) SecureBoot ✅ (on most) ❌ (only some do, not a standard) Add a bootloader without overwriting the others ✅ (on most) ❌ (only some do, not a standard) Supporting 2TB+ boot disks ✅ (hardware dependent) ❌ (requires GPT, which is supported on some Legacy systems, 2006+) Legacy Hardware Support ⚠️ (depends on which hardware, CSM switch should be possible) ✅ (hardware dependent) Easier maintenance (managing bootloaders and boot entries) ✅ (on most) ❌ (only some do, not a standard) OS Support ✅ ✅ Aside from Legacy hardware support (which are rare anyways nowadays), UEFI is the firmware to use when dual booting on newer hardware (2012+). But for legacy users, there is also a way to get some UEFI features but only through DUET (will be later discussed). Detecting which firmware you're using No OS: If your computer is: From IvyBridge era (~2012) and later Has a Windows 8 Sticker Then it probably has UEFI system, that said, it doesnt mean older generation motherboards do not, however with Windows 8 release, Microsoft standardised the UEFI specs for OEMs to get their certification (usually if you go with brand names like ASUS, Lenovo, HP, Dell... you're good to go). Any older than the above and the chances of having a proper UEFI implementation diminishes and you're better off with a Legacy booting. On Windows: Open Run (Win + R) and type msinfo32, you will be greeted with this window: Check BIOS Mode, it will either say UEFI or Legacy. Note that this is for Windows 8/10, if you're using Windows 7 or older, you're probably running it in Legacy mode. On linux: Method 1 On most linux distributions, you can run ls /sys/firmware/efi If the folder exists, then you're running in UEFI mode. Method 2 You can also download and run efibootmgr (available on most distributions) and you will either: Get boot entries variables Your system is running UEFI or get an error message that EFI variables aren't supported Your system is running in Legacy mode macOS in all of this macOS requires some special treatment because Apple wants to (papering their OS), and thus requires a set of rules to get it installed on any drive: GPT formatted disk EFI partition of at least 200MB With these two requirements in mind, you can theoretically just make them happen and you're good to go. If you understood what to do from these requirements and can do it on your own, you're good to go, if not, stay here to get more tips and tricks on how to properly fix this. Next sections: Cases: No OS installed on the machine: DB on same disk DB on different disks Already installed OS or existing data in the drive Systems with native UEFI support: convert your legacy booting OS to a UEFI one Linux Windows Systems with only Legacy booting only option: DUET Good luck, and BACKUP YOUR DATA. "},"Intro/disc.html":{"url":"Intro/disc.html","title":"Disclaimer","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Disclaimer We are not responsible for bricked devices, dead hard drives, thermonuclear war, or you getting fired because you got a kernel panic and didn't save your work. You are responsible for reading everything carefully before you do anything. Do your research and ask for support if you have any questions or issues before trying random things on the internet because \"it's the internet\". If you do, YOU are choosing to follow random things on the internet, and if YOU point the finger at us for messing up your device, WE will laugh at you. So please backup your data and have a plan B in case things break (unlikely, but it happens more than you know). "},"empty/":{"url":"empty/","title":"On empty disks","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Dualbooting on empty drive(s) This section will show you the tips and tricks of installing different OSes on empty drive(s) like on a newly built desktop or a FreeDos laptop. It will contain information on the install order and technicalities of dualbooting. This is not limited to macOS only, it can be also helpful for multibooting other OSes with each other. Let's get started. "},"empty/samedisk.html":{"url":"empty/samedisk.html","title":"One disk - multiple OSes","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Dualbooting on the same disk Basically you only have one empty disk and you want to install multiple OSes to it, it does not matter if there are other disks, as this section will only take care of one disk. Precautions: BACKUP YOUR DATA If possible, disconnect or disable any other disk/drive in your system, as it may interfere with the install procedure (especially windows') The drive isn't corrupted or have bad sectors Stable power input Situation this applies for: You already have macOS installed You have an empty disk with no OS installed To start, it is recommended to install the OSes on an empty drive with this order (although it will be noted later that it doesnt matter): macOS Any other OS and make sure to: Format the disk with macOS disk utility NOT to format the second partitions with MSDOS Have an OpenCore USB disk with you Here is how it goes: While installing macOS: Format your whole disk to GPT, this will ensure that macOS installer will create the necessary 200MB EFI partition that macOS requires (otherwise, APFS/HFS will not format the partition) All Drives\"> Once done, select \"Partition\", press \"+\" and choose the size of the other partition(s), \"Format\" MUST be Mac OS Extended or APFS (otherwise, macOS will convert the drive to hMBR which will break Windows installation). Hit Apply and let it do its thing: NOTE: on some macOS releases/setups, the disk utility may suddenly crash and send you back to the main menu, DO NOT PANIC (that sure helps), just wait for a minute or two then open disk utility back and check if the formatting is done. Once done, you can install macOS on the partition of your choosing and continue along. Note: You can still do the above if you have macOS already installed, do NOT use bootcamp assistant. BootCamp assistant will add extra drivers to the Windows installer that we do not need. For the others: Windows: Windows can be a bit of a bitch when it comes to installing it as a second OS (like some kind of insult or just Microsoft doesn't realize that there are other OSes than Windows /s). Create your windows installer (on another computer with the windows creation disk utility or Rufus) In case Windows has any issues while installing, boot back to the installer, remove the MSR/Recovery/Windows partitions that the installer made (there may be more, make sure you do not delete macOS or other OSes partitions), and follow this guide over at TenForums on how to install windows manually using the dism tool. Linux Linux can be straightforward unlike windows. Popular linux distros allow custom disk partitioning, just format the blank partition to EXT4 (or whatever other FS you prefer) and make sure you choose the EFI partition to point to where the bootloader will be installer (this should NOT \"delete\" OpenCore in any shape or form) and install. Other distros (like Arch) would do that manually anyway, just follow the standard procedure from the beginner guide (without formatting the EFI, because it's already formatted to FAT32) and follow through. Personally I would recommend not to install other bootloaders (like systemd-boot or grub) for the likes of arch because OpenCore can boot linux kernels that have EFISTUB support, if you do however like using a separate bootloader, you can have it your way, it doesn't change anything. "},"empty/diffdisk.html":{"url":"empty/diffdisk.html","title":"Multiple disks - multiple OSes","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Dualbooting on different disks I will not get too long in this part as it's the EASIEST one: Install macOS on one of the disks Install $(SECONDOS) on the other disk Install/copy OpenCore on the macOS disk EFI You're good to go Things to keep in mind: Windows can be a bitch when it comes to multidisk setups (it freaks out when it sees a lot of EFI partitions on a lot of disks) If the above happens, disable/disconnect all the other disks and install windows as you would normally do For laptops this can be a pain, you can install windows manually by following this guide from TenForums Make sure you choose the proper disk You can still refer to other situations if you want to dualboot more than one OS on one of the disks. Make sure that OpenCore is on the same disk of macOS for easier troubleshooting and cleaner setup "},"exist/":{"url":"exist/","title":"On filled disks","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Dualbooting on filled disks "},"exist/data.html":{"url":"exist/data.html","title":"On a filled non-OS related disk (Data disk)","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) On a filled non-OS related disk (Data disk) "},"exist/os.html":{"url":"exist/os.html","title":"On a filled OS related disk (Windows/Linux)","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) On a filled OS related disk (Windows/Linux) "},"oc/win.html":{"url":"oc/win.html","title":"For Windows booting","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Dualbooting with Windows WORK IN PROGRESS MBR based Windows installs ARE NOT SUPPORTED, you will need to convert it to GPT. If Windows is not picked up automagically, add the following to your config.plist: Misc -> BlessOverride -> \\EFI\\Microsoft\\Boot\\bootmgfw.efi Note: As of OpenCore 0.5.9, this no longer needs to be specified. OpenCore should pick up on this entry automatically "},"oc/linux.html":{"url":"oc/linux.html","title":"For Linux booting","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Dualbooting with Linux WORK IN PROGRESS If Linux is not picked up automagically, add the following to your config.plist: Misc -> BlessOverride -> \\EFI\\arch\\grubx64.efi Other common Linux bootloader paths: \\EFI\\arch\\grubx64.efi \\EFI\\ubuntu\\grubx64.efi "},"oc/duet.html":{"url":"oc/duet.html","title":"Installing OpenCore on a legacy system","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Installing OpenCore on a legacy system WORK IN PROGRESS At the moment there is no official support for MBR/Legacy based Windows installs, there are plans though unlikely to see anything anytime soon: Add MBR loading tool to OpenCore Currently there are 2 work arounds: Convert Windows into a GPT based drive(this means you will have to boot with OpenCore each time) Chainload rEFInd which does have support For the latter: Setup rEFInd Add BlessOverride path for rEFInd(\\EFI\\refind\\refind_x64.efi) Boot OpenCore Chain-load rEFInd Select Windows "},"oc/bootstrap.html":{"url":"oc/bootstrap.html","title":"Using Bootstrap.efi","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Using Bootstrap.efi Preparation Troubleshooting Quick UEFI Shell Reference Guide Adding OpenCore to your BIOS So with OpenCore 0.5.8 and newer, we get a neat little file inside our EFI/OC/Bootstrap folder called Bootstrap.efi. What this allows us to do is add OpenCore to our motherboard's boot menu and prevent issues where either Windows or Linux try to overwrite the BOOTx64.efi file which can happen during updates and completely delete any way of booting OpenCore. Preparation So to start we're gonna need the following: OpenCore 0.5.8 or newer Verify you have EFI/OC/Bootstrap/Bootstrap.efi config.plist settings: Misc -> Security -> BootProtect -> Bootstrap UEFI -> Quirks -> RequestBootVarRouting -> True OpenShell Bundled with OpenCore Remember to add this to both EFI/OC/Tools and config.plist -> Misc -> Tools This is mainly for troubleshooting Booting So once you've got the prerequisites out of the way, we're ready to boot! So what the first boot with these settings enabled is create a new boot option in our BIOS(Boot9696) and every boot after this will update the entry making sure it's correct. This now allows us to either remove BOOTx64.efi or not worry about it when other OSes overwrite this file. If no new boot option is created, you can go down and follow the troubleshooting steps on manually adding it. But triple check the above settings are correct on your system. Troubleshooting This is mainly as a mini-guide in case BootProtect doesn't work or you'd like to do it manually. Verify Bootstrap entry was applied Removing Bootstrap entry from BIOS Verify Bootstrap entry was applied For those wanting to verify that the entry was applied in OpenCore, enabling logging(see OpenCore Debugging) and check for entries similar to these: OCB: Have existing option 1, valid 1 OCB: Boot order has first option as the default option Removing Bootstrap entry from BIOS Because the Bootstrap entry is a protected entry when resetting NVRAM, you'll need to set certain settings: Misc -> Security -> AllowNvramReset -> true Misc -> Security -> BootProtect -> None Once these 2 are set in your config.plist, you can next reboot into the OpenCore picker and select the Reset NVRAM entry "},"oc/bootcamp.html":{"url":"oc/bootcamp.html","title":"BootCamp installation","keywords":"","body":" Last modified: Tue Jun 16 2020 19:27:09 GMT+0000 (Coordinated Universal Time) Installing and using BootCamp utilities So a neat feature of OpenCore is the ability to avoid the BIOS entirely and use Startup disk solely for multiboot. Problem comes in when we try to boot windows and have no way of setting the boot option back to macOS. That's where the BootCamp utilities come in. Note: This guide will not cover the creation of the Windows installer, only the installation of BootCamp drivers. Example of Windows installer creation: Build a Bootable Windows ISO Reminder: Windows MUST be GPT/GUID based, OpenCore will not boot legacy installs Note 2: Using BootCamp utilities from macOS will erase the EFI/BOOT/BOOTx64.efi file on your EFI, which is needed for booting OpenCore. And OpenCore itself does not support MBR based installs so the utility is useless to us Preparations To start we'll need the following: Windows already installed MUST be UEFI/GPT based Brigadier To download the BootCamp drivers SMBIOS injection enabled As the drivers have a SMBIOS check Setup Bootstrap.efi Not required but can help alleviate headaches when Windows erases the BOOTx64.efi OpenCore uses Installation To install, it's as simple as grabbing Brigadier and running either Brigadier.bat for Windows or Brigadier.command for macOS. If the SMBIOS you're currently using either has BootCamp issues or want to download for another SMBIOS, you can add -- model{SMBIOS} to the end: path/to/Brigadier --model MacPro7,1 Note: Older versions of the BootCamp installer(6.0) do not support APFS, you'll need to either choose a newer SMBIOS that would have it bundled(ie. iMac 19,1) or after installation update your bootcamp software. See below for more details on troubleshooting: Windows Startup Disk can't see APFS drives Next you will find our bootcamp drivers under either: Windows: \\Users\\{Username}\\bootcamp-{filename}\\BootCamp macOS: /Users/{Username}/BootCamp-{filename}/WindowsSupport.dmg macOS users will next need to expand WindowsSupport.dmg and place it somewhere Windows can get. Next navigate to the bootcamp-{filename}\\BootCamp folder and run the Setup.exe: Once all is finished, you now have BootCamp switching! There should be a little BootCamp icon in you tray now that you can select which drive to boot to. Note: For those no needing the extra drivers BootCamp provides, you can delete the following: $WinPEDriver$: DO NOT delete the folder itself, just the drivers inside Apple Wifi card users will want to keep the following: $WinPEDriver$/BroadcomWireless $WinPEDriver$/BroadcomBluetooth $WinPEDriver$/AppleBluetoothBroadcom BootCamp/Drivers/... DO NOT delete BootCamp/Drivers/Apple Apple Wifi card users will want to keep the following: BootCamp/Drivers/Broadcom/BroadcomBluetooth Troubleshooting Can't find Windows/BootCamp drive in picker \"You can't change the startup disk to the selected disk\" error Booting Windows results in BlueScreen or Linux crashes Booting Windows error: OCB: StartImage failed - Already started Windows Startup Disk can't see APFS drives Can't find Windows/BootCamp drive in picker So with OpenCore, we have to note that legacy Windows installs are not supported, only UEFI. Most installs now are UEFI based but those made by BootCamp Assistant in macOS are legacy based, so you'll have to find other means to make an installer(Google's your friend). This also means MasterBootRecord/Hybrid partitions are also broken so you'll need to format the drive you want to install onto with DiskUtility. Now to get onto troubleshooting: Make sure Misc -> Security -> ScanPolicy is set to 0 to show all drives If Windows and OpenCore's boot loaders are on the same drive, you'll need to add a BlessOverride entry: Misc -> BlessOverride -> \\EFI\\Microsoft\\Boot\\bootmgfw.efi Note: As of OpenCore 0.5.9, this no longer needs to be specified. OpenCore should pick up on this entry automatically \"You can't change the startup disk to the selected disk\" error This is commonly caused by either: 3rd Party NTFS Drivers(ie. Paragon) Irregular partition setup of the Windows drive, specifically that the EFI is not the first partition. To fix the former, either disable or uninstall these tools. To fix the latter, we need to enable this quirk: PlatformInfo -> Generic -> AdviseWindows -> True Booting Windows results in BlueScreen or Linux crashes This is due to alignment issues, make sure SyncRuntimePermissions is enabled on firmwares supporting MATs. Check your logs whether your firmware supports Memory Attribute Tables(generally seen on 2018 firmwares and newer) For Z390 and newer motherboards, you'll also want to enable ProtectUefiServices to ensure OpenCore's patches are applying correctly. If your firmware is quite old(generally 2013 and older), you'll want to enable ProtectMemoryRegions. Due to the variations of firmwares from vendor to vendor, you'll need to play around with the combination of these 3 quirks and see which works best. Common Windows error code: 0xc000000d Booting Windows error: OCB: StartImage failed - Already started This is due to OpenCore getting confused when trying to boot Windows and accidentally thinking it's booting OpenCore. This can be avoided by either move Windows to it's own drive or adding a custom drive path under BlessOverride. See Configuration.pdf and Can't find Windows/BootCamp drive in picker entry for more details. Windows Startup Disk can't see APFS drives Outdated BootCamp drivers(generally ver 6.0 will come with brigadier, BootCamp Utility in macOS provides newer version like ver 6.1). You can try to alleviate these issues by either updating to the newest release with Apple's software updater or selecting a newer SMBIOS from brigadier(ie. --model iMac19,1) and when running brigadier. For the latter, you'll need to run the following(replace filename.msi with the BootCamp installation msi): msiexec.exe /x \"c:\\filename.msi\" "}}